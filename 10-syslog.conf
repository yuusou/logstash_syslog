input {
  tcp {
    port => 5140
    type => syslog
  }
  udp {
    port => 5140
    type => syslog
  }
}

filter {
  if [type] == "syslog" {

    # Strip the syslog PRI part and create facility and severity fields.
    grok {
      match => { "message" => "<%{NUMBER:syslog_pri}>%{GREEDYDATA:message_remainder}" }
      add_tag => [ "got_syslog_pri" ]
      add_field => [ "syslog_raw_message", "%{message}" ]
    }
    if "got_syslog_pri" in [tags] {
      syslog_pri {}
      mutate {
        rename => { "syslog_facility" => "facility" }
        rename => { "syslog_severity" => "severity" }
        rename => { "syslog_facility_code" => "facility_code" }
        rename => { "syslog_severity_code" => "severity_code" }
      }
      mutate { replace => { "message" => "%{message_remainder}" } }
      mutate { remove_field => [ "message_remainder" ] }
    } else {
      mutate {
        add_field => [ "syslog_pri", "13" ]
        add_field => [ "facility", "user-level" ]
        add_field => [ "severity", "notice" ]
        add_field => [ "facility_code", "1" ]
        add_field => [ "severity_code", "5" ]
      }
    }

    # Strip the syslog timestamp and force event timestamp to be the same.
    mutate { add_field => [ "received_at", "%{@timestamp}" ] }
    if !("_grokparsefailure" in [tags]) {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:message_remainder}" }
        match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp}%{SPACE}%{GREEDYDATA:message_remainder}" }
        add_tag => [ "got_syslog_timestamp" ]
      }
    }
    if "got_syslog_timestamp" in [tags] {
      date { match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ] }
      mutate { remove_field => [ "syslog_timestamp" ] }
      mutate { replace => { "message" => "%{message_remainder}" } }
      mutate { remove_field => [ "message_remainder" ] }
    }

    # Strip the host field from the syslog line.
    mutate { add_field => [ "received_from", "%{host}" ] }
    if !("_grokparsefailure" in [tags]) {
      grok {
        match => { "message" => "%{SYSLOGHOST:syslog_hostname}%{SPACE}%{GREEDYDATA:message_remainder}" }
        add_tag => [ "got_syslog_hostname" ]
      }
    }
    if "got_syslog_hostname" in [tags] {
      mutate { replace => { "host" => "%{syslog_hostname}" } }
      mutate { remove_field => [ "syslog_hostname" ] }
      mutate { replace => { "message" => "%{message_remainder}" } }
      mutate { remove_field => [ "message_remainder" ] }
    } else {
      mutate { replace => { "host" => "unknown" } }
    }

    # Strip the program field from the syslog line.
    if !("_grokparsefailure" in [tags]) {
      grok {
        match => { "message" => "(?:%{SYSLOGPROG:syslog_program}):%{SPACE}%{GREEDYDATA:message_remainder}" }
        add_tag => [ "got_syslog_program_pid" ]
      }
    }
    if "got_syslog_program_pid" in [tags] {
      mutate { remove_field => [ "syslog_program" ] }
      mutate { replace => { "message" => "%{message_remainder}" } }
      mutate { remove_field => [ "message_remainder" ] }
    }
    if [program] !~ /.+/ {
      mutate { add_field => [ "program", "unknown" ] }
    }
    if [pid] !~ /.+/ {
      mutate { add_field => [ "pid", "0" ] }
    }
    if "_grokparsefailure" in [tags] {
      mutate { remove_tag => [ "_grokparsefailure" ] }
    }
  }
}

output {
  stdout { codec => rubydebug }
  if [severity_code] < 6 {
    elasticsearch { hosts => ["logs.example.net:9200"] }
  }
}
